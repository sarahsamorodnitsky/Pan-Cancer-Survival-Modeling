sum(n.vec)
library(xtable)
CancerTable = cbind(names(n.vec), n.vec)
CancerTable
rownames(CancerTable) = NULL
xtable(CancerTable)
n.vec
match.post = c()
for (i in 1:length(cancer_types_27)) {
match.post[i] = all(S27.50.2[[i]][!is.na(S27.50.2[[i]])] == clinical_data_list_S[[i]]$death_days_to[clinical_data_list_S[[i]]$death_days_to != "#N/A"])
}
match.post
i=1
cens.match.post = c()
cens.match.post[i] = all(Last_Contact[[i]][!is.na(Last_Contact[[i]])] == clinical_data_list_S[[i]]$last_contact_days_to[clinical_data_list_S[[i]]$last_contact_days_to != "#N/A"])
cens.match.post
surv.match.post = c()
cens.match.post = c()
for (i in 1:length(cancer_types_27)) {
surv.match.post[i] = all(S27.50.2[[i]][!is.na(S27.50.2[[i]])] == clinical_data_list_S[[i]]$death_days_to[clinical_data_list_S[[i]]$death_days_to != "#N/A"])
cens.match.post[i] = all(Last_Contact[[i]][!is.na(Last_Contact[[i]])] == clinical_data_list_S[[i]]$last_contact_days_to[clinical_data_list_S[[i]]$last_contact_days_to != "#N/A"])
}
surv.match.post
cens.match.post
i=3
Last_Contact[[i]][!is.na(Last_Contact[[i]])]
clinical_data_list_S[[i]]$last_contact_days_to[clinical_data_list_S[[i]]$last_contact_days_to != "#N/A"]
clinical_data_list_S[[i]]$last_contact_days_to[clinical_data_list_S[[i]]$last_contact_days_to != "#N/A" &
clinical_data_list_S[[i]]$last_contact_days_to != ]
cens.match.post[i] = all(Last_Contact[[i]][!is.na(Last_Contact[[i]])] == clinical_data_list_S[[i]]$last_contact_days_to[clinical_data_list_S[[i]]$last_contact_days_to != "#N/A" &
clinical_data_list_S[[i]]$last_contact_days_to != ])
cens.match.post[i] = all(Last_Contact[[i]][!is.na(Last_Contact[[i]])] == clinical_data_list_S[[i]]$last_contact_days_to[clinical_data_list_S[[i]]$last_contact_days_to != "#N/A" &
clinical_data_list_S[[i]]$last_contact_days_to > 0])
clinical_data_list_S[[i]]$last_contact_days_to > 0
clinical_data_list_S[[i]]$last_contact_days_to
clinical_data_list_S[[i]]$last_contact_days_to[clinical_data_list_S[[i]]$last_contact_days_to != "#N/A"
]
clinical_data_list_S[[i]]$last_contact_days_to[clinical_data_list_S[[i]]$last_contact_days_to != "#N/A"]
cens.i = clinical_data_list_S[[i]]$last_contact_days_to[clinical_data_list_S[[i]]$last_contact_days_to != "#N/A"]
cens.i
cens.i > 0
cens.i != 0
cens.i.new = cens.i[cens.i > 0]
cens.i[cens.i != 0]
all(Last_Contact[[i]][!is.na(Last_Contact[[i]])] == cens.i.new
Last_Contact[[i]][!is.na(Last_Contact[[i]])]
Last_Contact[[i]][!is.na(Last_Contact[[i]])]
cens.i.new
cens.i = clinical_data_list_S[[i]]$last_contact_days_to[clinical_data_list_S[[i]]$last_contact_days_to != "#N/A"]
cens.i[cens.i != 0]
cens.i.new = cens.i[cens.i != 0]
cens.i.new
length(cens.i)
length(Last_Contact[[i]][!is.na(Last_Contact[[i]])])
same.length = c()
NA.lc.surv = c()
for (i in 1:length(S27.50.3)) {
same.length[i] = length(S27.50.3[[i]]) == length(Last_Contact[[i]])
for (j in 1:length(S27.50.3[[i]])) {
NA.lc.surv[j] = is.na(S27.50.3[[i]][j]) & is.na(Last_Contact[[i]][j])
}
}
same.length
any(NA.lc.surv)
surv.match.post = c()
cens.match.post = c()
for (i in 1:length(cancer_types_27)) {
surv.match.post[i] = all(S27.50.2[[i]][!is.na(S27.50.2[[i]])] == clinical_data_list_S[[i]]$death_days_to[clinical_data_list_S[[i]]$death_days_to != "#N/A"])
}
surv.match.post
S27.50.2[[1]]
clinical_data_list_S[[1]]$death_days_to
length(Last_Contact[[1]])
length(clinical_data_list_S[[1]]$last_contact_days_to)
clinical_data_list_S[[1]]$last_contact_days_to
CancerData_SelectGenes
AddAgeCensorToX = function(CancerData_SelectGenes, clinical_data_list_S, cancer_types_28, NewGenes) {
n = length(CancerData_SelectGenes)
X = list()
Y = list()
for (i in 1:n) {
current_X = CancerData_SelectGenes[[i]]
current_Y = clinical_data_list_S[[i]]
age = as.numeric(as.character(current_Y$age_at_initial_pathologic_diagnosis))
current_X_new = cbind(age, as.numeric(as.character(current_Y$last_contact_days_to)), current_X) # concatenating age, censor time, and mutation status
colnames(current_X_new) = c("Age", "LastContact", NewGenes)
# rownames(current_X_new) = NULL
current_Y_new = as.numeric(as.character(current_Y$death_days_to))
X[[i]] = current_X_new
Y[[i]] = current_Y_new
}
names(X) = cancer_types_28
names(Y) = cancer_types_28
return(list(X = X, Y = Y))
}
FS27.50 = AddAgeCensorToX(CancerData_SelectGenes, clinical_data_list_S, cancer_types_27, NewGenes) # will give warnings
F27.50.2 = FS27.50$X
S27.50.2 = FS27.50$Y
F27.50.2[[1]]
S27.50.2 = FS27.50$Y
S27.50.2[[1]]
current_X = CancerData_SelectGenes[[i]]
current_Y = clinical_data_list_S[[i]]
current_Y
AddAgeCensorToX = function(CancerData_SelectGenes, clinical_data_list_S, cancer_types_28, NewGenes) {
n = length(CancerData_SelectGenes)
X = list()
Y = list()
for (i in 1:n) {
current_X = CancerData_SelectGenes[[i]]
current_Y = clinical_data_list_S[[i]]
age = as.numeric(as.character(current_Y$age_at_initial_pathologic_diagnosis))
current_X_new = cbind(age, as.numeric(as.character(current_Y$last_contact_days_to)), current_X) # concatenating age, censor time, and mutation status
colnames(current_X_new) = c("Age", "LastContact", NewGenes)
# rownames(current_X_new) = NULL
current_Y_new = as.numeric(as.character(current_Y$death_days_to))
names(current_Y_new) = current_Y$bcr_patient_barcode
X[[i]] = current_X_new
Y[[i]] = current_Y_new
}
names(X) = cancer_types_28
names(Y) = cancer_types_28
return(list(X = X, Y = Y))
}
FS27.50 = AddAgeCensorToX(CancerData_SelectGenes, clinical_data_list_S, cancer_types_27, NewGenes) # will give warnings
F27.50.2 = FS27.50$X
S27.50.2 = FS27.50$Y
S27.50.2
length(CancerData_SelectGenes)
cancer_types_28
FS27.50 = AddAgeCensorToX(CancerData_SelectGenes, clinical_data_list_S, cancer_types_27, NewGenes) # will give warnings
F27.50.2 = FS27.50$X
S27.50.2 = FS27.50$Y
FS27.50.2 = PreProcessing(F27.50.2, S27.50.2, cancer_types_27)
F27.50.3 = FS27.50.2$Full
S27.50.3 = FS27.50.2$Survival
Last_Contact = FS27.50.2$LastContact
S27.50.3
Last_Contact
S27.50.2
FS27.50
# Processing the data so that extraneous observations are removed
FS27.50.2 = PreProcessing(F27.50.2, S27.50.2, cancer_types_27)
F27.50.3 = FS27.50.2$Full
S27.50.3 = FS27.50.2$Survival
Last_Contact = FS27.50.2$LastContact
names(F27.50.3)
names(F27.50.3[[1]])
rownames(F27.50.3[[1]])
names(S27.50.3[[1]])
i
i=1
rownames(F27.50.3[[i]]) == names(S27.50.3[[i]])
names.match = c()
for (i in 1:length(cancer_types_27)) {
names.match = all(rownames(F27.50.3[[i]]) == names(S27.50.3[[i]]))
}
names.match
names.match = c()
for (i in 1:length(cancer_types_27)) {
names.match[i] = all(rownames(F27.50.3[[i]]) == names(S27.50.3[[i]]))
}
names.match
names.match = c()
for (i in 1:length(cancer_types_27)) {
names.match[i] = all(rownames(F27.50.3[[i]]) == names(S27.50.3[[i]]) &
(rownames(F27.50.3) == names(Last_Contact)))
}
names.match
j=1
current.cans = F27.50.3[[i]]
rownames(current.cans)[j]
current.id = rownames(current.cans)[j]
clinical_data[clinical_data$bcr_patient_barcode == current.id,]
current.clin = clinical_data[clinical_data$bcr_patient_barcode == current.id,]
current.surv = current.clin$death_days_to
current.cens = current.clin$last_contact_days_to
current.surv
current.cens
S27.50.3[[i]][j]
cens.saved = Last_Contact[[i]][j]
cens.saved
surv.saved == current.surv
surv.saved = S27.50.3[[i]][j]
cens.saved = Last_Contact[[i]][j]
surv.saved == current.surv
j=2
current.id = rownames(current.cans)[j]
current.clin = clinical_data[clinical_data$bcr_patient_barcode == current.id,]
current.surv = current.clin$death_days_to
current.cens = current.clin$last_contact_days_to
surv.saved = S27.50.3[[i]][j]
cens.saved = Last_Contact[[i]][j]
surv.saved
current.surv
is.na(surv.saved) & current.surv == "#N/A"
is.na(surv.saved)
current.surv == "#N/A"
current.id = rownames(current.cans)[j]
current.clin = clinical_data[clinical_data$bcr_patient_barcode == current.id,]
current.surv = current.clin$death_days_to
current.cens = current.clin$last_contact_days_to
surv.saved = S27.50.3[[i]][j]
cens.saved = Last_Contact[[i]][j]
surv.i[j] = if (!is.na(surv.saved)) surv.saved == current.surv else (is.na(surv.saved) & current.surv == "#N/A")
surv.i = c()
cens.i = c()
surv.i[j] = if (!is.na(surv.saved)) surv.saved == current.surv else (is.na(surv.saved) & current.surv == "#N/A")
cens.i[j] = if (!is.na(surv.saved)) cens.saved == current.cens else (is.na(cens.saved) & current.cens == "#N/A")
surv.i[j]
cens.i[j]
cens.saved
!is.na(cens.saved)
is.na(cens.saved)
cens.saved == current.cens
current.cens
surv.time.matches = c()
cens.time.matches = c()
for (i in 1:length(cancer_types_27)) {
current.cans = F27.50.3[[i]]
surv.i = c()
cens.i = c()
for (j in 1:nrow(F27.50.3[[i]])) {
current.id = rownames(current.cans)[j]
current.clin = clinical_data[clinical_data$bcr_patient_barcode == current.id,]
current.surv = current.clin$death_days_to
current.cens = current.clin$last_contact_days_to
surv.saved = S27.50.3[[i]][j]
cens.saved = Last_Contact[[i]][j]
surv.i[j] = if (!is.na(surv.saved)) surv.saved == current.surv else (is.na(surv.saved) & current.surv == "#N/A")
cens.i[j] = if (!is.na(cens.saved)) cens.saved == current.cens else (is.na(cens.saved) & current.cens == "#N/A")
}
surv.time.matches[i] = all(surv.i)
cens.time.matches[i] = all(cens.i)
}
surv.time.matches
cens.time.matches
all(surv.time.matches)
all(cens.time.matches)
CancerData_SelectGenes[[i]]
clinical_data_list_S[[i]]
F27.50.3[[i]]
F27.50.3[[i]][,1][j]
current.clin$age_at_initial_pathologic_diagnosis
current.age = current.clin$age_at_initial_pathologic_diagnosis
surv.time.matches = c()
cens.time.matches = c()
age.matches = c()
for (i in 1:length(cancer_types_27)) {
current.cans = F27.50.3[[i]]
surv.i = c()
cens.i = c()
ages.i = c()
for (j in 1:nrow(F27.50.3[[i]])) {
current.id = rownames(current.cans)[j]
current.clin = clinical_data[clinical_data$bcr_patient_barcode == current.id,]
current.surv = current.clin$death_days_to
current.cens = current.clin$last_contact_days_to
current.age = current.clin$age_at_initial_pathologic_diagnosis
surv.saved = S27.50.3[[i]][j]
cens.saved = Last_Contact[[i]][j]
age.saved = F27.50.3[[i]][,1][j]
surv.i[j] = if (!is.na(surv.saved)) surv.saved == current.surv else (is.na(surv.saved) & current.surv == "#N/A")
cens.i[j] = if (!is.na(cens.saved)) cens.saved == current.cens else (is.na(cens.saved) & current.cens == "#N/A")
ages.i[j] = age.saved == current.age
}
surv.time.matches[i] = all(surv.i)
cens.time.matches[i] = all(cens.i)
age.matches[i] = all(ages.i)
}
all(surv.time.matches)
all(cens.time.matches)
age.matches
test=c()
for (i in 1:100000000){test[i]=i}
rm(test)
test = c(1)
test[2] = 3
test
rm(test)
# Calculating the average mutation rate across all cancer types
AvgMutRate = MutationRateByCancer(CancerData_RO_S, cancer_types_27)
AvgMutRate = AvgMutRate[!(names(AvgMutRate) %in% c("Unknown", "."))] # Getting rid of the gene with the name "Unknown"
AvgMutRate = sort(AvgMutRate, decreasing = T)[1:50]
NewGenes = sort(names(AvgMutRate))
AvgMutRate
t(AvgMutRate)
t(t(AvgMutRate))
load("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/CancerData.rda")
load("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/Pan-Cancer-Survival-Modeling/CancerDataForFindingGenes.rda")
rm(CancerData)
load("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/Pan-Cancer-Survival-Modeling/CancerDataForFindingGenes.rda")
CancerData1 = CancerData
rm(CancerData)
load("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/CancerData.rda")
load("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/Pan-Cancer-Survival-Modeling/CancerData.rda")
identical(CancerData, CancerData1)
length(CancerData)
length(CancerData1)
head(CancerData[[1]])
head(CancerData1[[1]])
names(CancerData)
names(CancerData1)
names(CancerData) = NULL
identical(CancerData, CancerData1)
# Check that there are no NAs in the age column
any.NAs = c()
for (i in 1:length(F27.50.2)) {
any.NAs[i] = any(is.na(F27.50.2[[i]][,1]))
}
any.NAs
AvgMutRate
t(t(AvgMutRate))
xtable(t(t(AvgMutRate)))
rownames(t(t(AvgMutRate)))
cbind(names(AvgMutRate))
cbind(names(AvgMutRate), round(AvgMutRate, 3))
xtable(cbind(names(AvgMutRate), round(AvgMutRate, 3)))
xtable(round(AvgMutRate, 3))
xtable(round(AvgMutRate, 3))
xtable(round(AvgMutRate, 3))
xtable(names(AvgMutRate), round(t(t(AvgMutRate))[,1], 3))
round(t(t(AvgMutRate))[,1], 3)
AvgMutRate
round(t(t(AvgMutRate))[,1], 3)
round(AvgMutRate, 3)
t(t(round(AvgMutRate, 3)))
xtable(t(t(round(AvgMutRate, 3))))
xtable(t(t(round(AvgMutRate, 4))))
xtable(t(t(round(AvgMutRate, 5))))
xtable(t(t(round(AvgMutRate, 3))))
xtable(t(t(round(AvgMutRate, 1))))
xtable(t(t(round(AvgMutRate,21))))
xtable(t(t(round(AvgMutRate,2))))
xtable(t(t(round(AvgMutRate,3))))
xtable(t(t(AvgMutRate)))
xtable(AvgMutRate)
xtable(t(t(AvgMutRate)))
AvgMutRate
round(AvgMutRate,3)
t(t(round(AvgMutRate,3)))
xtable(t(t(round(AvgMutRate,3))))
?xtable
xtable(t(t(round(AvgMutRate,3))),digits=3)
Generate5FoldTrainingSet = function(X, Y, cancer_types, n_vec) {
# Generates 5 folds of training values for each cancer type
# non-randomly because of the seed
InitManyLists = function(n) {
new_list = list()
for (i in 1:n) {
new_list[[i]] = list()
}
return(new_list)
}
set.seed(1) # setting a seed so the same training data is produced each time
# subsetting Y into training set
n = length(X)
prop = 0.2 # proportion to go into test set
Training_obs = InitManyLists(n)
names(Training_obs) = cancer_types
for (k in 1:n) { # for each cancer type
current_n = n_vec[k] # size of current cancer type
reorder_ind = sample(1:current_n, size = current_n, replace = F) # reorder the observations
current_test_n = round(prop*current_n) # how many observations should go in the test set
fold_ind = seq(1, current_n, by = current_test_n) # the indices of the start of each test set
all_ind = 1:current_n
test_folds = lapply(1:length(fold_ind), function(i) { # the indices of observations for the test set
if (i < length(fold_ind)) {
test_ind = seq(fold_ind[i], fold_ind[i + 1] - 1) # get a sequence of indices for the test set
reorder_ind[test_ind] # select from the reordered observations
} else {
test_ind = seq(fold_ind[i], current_n) # get a sequence of indices for the test set
reorder_ind[test_ind] # select from the reordered observations
}
})
if (length(fold_ind) > 5) { # if the set of obs was not evenly split into 5 groups
extra_obs = test_folds[[6]]
for (i in 1:length(extra_obs)) {
test_folds[[i %% 5]] = c(test_folds[[i %% 5]], extra_obs[i]) # add an extra obs to another fold in a circular fashion
}
}
test_folds = test_folds[-6] # get rid of the extra set of obs
training_folds = lapply(1:length(test_folds), function(i) { # indices for observations in the training set
all_ind[!(all_ind %in% test_folds[[i]])]
})
Training_obs[[k]] = training_folds
}
return(list(Training_obs = Training_obs))
}
F5Training_obs = Generate5FoldTrainingSet(F27.50.3, S27.50.3, cancer_types_27, n_vec)
n_vec =  c(unlist(lapply(F27.50.3, nrow)))
F5Training_obs = Generate5FoldTrainingSet(F27.50.3, S27.50.3, cancer_types_27, n_vec)
F5Training_obs1 = Generate5FoldTrainingSet(F27.50.3, S27.50.3, cancer_types_27, n_vec)
F5Training_obs2 = Generate5FoldTrainingSet(F27.50.3, S27.50.3, cancer_types_27, n_vec)
identical(F5Training_obs1, F5Training_obs2)
F5Training_obs3 = Generate5FoldTrainingSet(F27.50.3, S27.50.3, cancer_types_27, n_vec)
identical(F5Training_obs1, F5Training_obs3)
identical(F5Training_obs2, F5Training_obs3)
head(F5Training_obs)
AvgMutRate
n = length(CancerData)
all_genes = c()
for (i in 1:n) {
type = CancerData[[i]]
genes.i = rownames(type) # the genes for which data is available for the ith cancer type
genes_to_add = genes.i[!(genes.i %in% all_genes)] # genes in current cancer type which have not been saved yet
all_genes = c(all_genes, genes_to_add)
}
all_genes = sort(all_genes)
rates = data.frame(gene = all_genes)
all_genes
rates = data.frame(gene = all_genes)
rates
i=1
type = CancerData[[i]]
type
?apply
rates.i = apply(type, 1, function(row) sum(row)/length(row))
rates.i
type = CancerData[[i]]
rates.i = apply(type, 1, function(row) sum(row)/length(row))
rates.i
genes.i = rownames(type) # current genes
names(rates.i) == genes.i
all(names(rates.i) == genes.i)
rates$gene
missing_genes.i = rates$gene[!(rates$gene %in% genes.i)] # the genes for which there is no data in this cancer type
missing_genes.i
rates_to_add.i = rep(0, length(missing_genes.i))
names(rates_to_add.i) = missing_genes.i
rates.i = c(rates.i, rates_to_add.i) # update rates vector so it is the same length as the rates dataframe
rates.i.ord = rates.i[order(factor(names(rates.i), levels = as.character(rates$gene)))]
rates.i.ord
rates.i.ord = rates.i[order(factor(names(rates.i), levels = as.character(rates$gene)))]
names(rates.ord)
names(rates.i.ord)
head(names(rates.i.ord))
head(rates)
head(rates[,1])
head(rates[,1]) == head(names(rates.i.ord))
rates[,1] == names(rates.i.ord)
all(rates[,1] == names(rates.i.ord))
for (i in 1:n) {
type = CancerData[[i]]
rates.i = apply(type, 1, function(row) sum(row)/length(row))
genes.i = rownames(type) # current genes
missing_genes.i = rates$gene[!(rates$gene %in% genes.i)] # the genes for which there is no data in this cancer type
rates_to_add.i = rep(0, length(missing_genes.i))
names(rates_to_add.i) = missing_genes.i
# combining the data for available genes with the added genes
rates.i = c(rates.i, rates_to_add.i) # update rates vector so it is the same length as the rates dataframe
rates.i.ord = rates.i[order(factor(names(rates.i), levels = as.character(rates$gene)))]
rates = cbind(rates, rates.i.ord)
}
n = length(CancerData)
CancerData = CancerData_RO_S
n = length(CancerData)
all_genes = c()
for (i in 1:n) {
type = CancerData[[i]]
genes.i = rownames(type) # the genes for which data is available for the ith cancer type
genes_to_add = genes.i[!(genes.i %in% all_genes)] # genes in current cancer type which have not been saved yet
all_genes = c(all_genes, genes_to_add)
}
all_genes = sort(all_genes)
rates = data.frame(gene = all_genes)
for (i in 1:n) {
type = CancerData[[i]]
rates.i = apply(type, 1, function(row) sum(row)/length(row))
genes.i = rownames(type) # current genes
missing_genes.i = rates$gene[!(rates$gene %in% genes.i)] # the genes for which there is no data in this cancer type
rates_to_add.i = rep(0, length(missing_genes.i))
names(rates_to_add.i) = missing_genes.i
# combining the data for available genes with the added genes
rates.i = c(rates.i, rates_to_add.i) # update rates vector so it is the same length as the rates dataframe
rates.i.ord = rates.i[order(factor(names(rates.i), levels = as.character(rates$gene)))]
rates = cbind(rates, rates.i.ord)
}
ncol(rates)
head(rates)
cancer_types=cancer_types_27
rates$gene
rates$gene == rownames(rates)
all(rates$gene == rownames(rates))
colnames(rates) = c("gene", cancer_types) # naming the columns appropriately
head(rates)
clinical_data[clinical_data$bcr_patient_barcode == current.id,]
current.clin$age_at_initial_pathologic_diagnosis
730/80
9.125/4
mat = matrix(c(1:5), ncol = 5, nrow = 10)
mat
mat = matrix(rep(0,5), ncol = 5, nrow = 10)
mat
sort(all_genes)
all(sort(all_genes) == all_genes[order(all_genes)])
rates.i[order(factor(names(rates.i), levels = as.character(rates$gene)))]
rates.i = c(rates.i, rates_to_add.i) # update rates vector so it is the same length as the rates dataframe
i
type = CancerData[[i]]
rates.i = apply(type, 1, function(row) sum(row)/length(row))
genes.i = rownames(type) # current genes
missing_genes.i = rates$gene[!(rates$gene %in% genes.i)] # the genes for which there is no data in this cancer type
rates_to_add.i = rep(0, length(missing_genes.i))
names(rates_to_add.i) = missing_genes.i
rates.i = c(rates.i, rates_to_add.i) # update rates vector so it is the same length as the rates dataframe
rates.i
type
rates.i = c(rates.i, rates_to_add.i) # update rates vector so it is the same length as the rates dataframe
order(factor(names(rates.i), levels = as.character(rates$gene)))
names(rates.i)[order(factor(names(rates.i), levels = as.character(rates$gene)))]
all(names(rates.i)[order(factor(names(rates.i), levels = as.character(rates$gene)))] == sort(names(rates.i)))
