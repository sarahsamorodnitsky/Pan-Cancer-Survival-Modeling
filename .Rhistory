init = rep(0.1, 8)
mle = optim(init, loglik)
mle
t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta)
params=init
beta11 = params[1]
beta12 = params[2]
beta22 = params[3]
beta2 = params[4]
beta3 = params[5]
rho2 = params[7]
sigma2 = params[8]
nC = nrow(control)
nI = nrow(identical_twins)
nF = nrow(fraternal_twins)
beta = matrix(c(beta11, beta12, beta22, beta2, beta3), nrow = 5, ncol = 1)
lik1 = (1/(2*pi*sigma2))^(nC/2) * exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
lik1
?exp
lik2 = (1/(2*pi*sigma2*sqrt(1-rho1^2)))^nI * exp((-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)))
lik2
(-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta))
exp((-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)))
(-1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta))
exp((-1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)))
init = rep(100, 8)
mle = optim(init, loglik)
params=init
(1/(2*pi*sigma2))^(nC/2) * exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
init = c(rep(100,5), 0.01, 0.01, 100)
params=init
(1/(2*pi*sigma2))^(nC/2) * exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
(-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta)
init = c(rep(1,5), 0.01, 0.01, 100)
params=init
beta11 = params[1]
beta12 = params[2]
beta22 = params[3]
beta2 = params[4]
beta3 = params[5]
rho1 = params[6]
rho2 = params[7]
sigma2 = params[8]
(-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta)
exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
lik1 = (1/(2*pi*sigma2))^(nC/2) * exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
lik1
(-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta))
lik2 = (1/(2*pi*sigma2*sqrt(1-rho1^2)))^nI * exp((-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)))
lik2
init = c(rep(1,5), 0.01, 0.01, 1000)
beta11 = params[1]
beta12 = params[2]
beta22 = params[3]
beta2 = params[4]
beta3 = params[5]
rho1 = params[6]
rho2 = params[7]
sigma2 = params[8]
(-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta)
init = c(rep(1,5), 0.01, 0.01, 10000)
beta11 = params[1]
beta12 = params[2]
beta22 = params[3]
beta2 = params[4]
beta3 = params[5]
rho1 = params[6]
rho2 = params[7]
sigma2 = params[8]
beta = matrix(c(beta11, beta12, beta22, beta2, beta3), nrow = 5, ncol = 1)
(-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta)
lik1 = (1/(2*pi*sigma2))^(nC/2) * exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
lik1
lik2 = (1/(2*pi*sigma2*sqrt(1-rho1^2)))^nI * exp((-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)))
lik3 = (1/(2*pi*sigma2*sqrt(1-rho2^2))) * exp((-1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)))
ans = lik1 * lik2 * lik3
ans
log(lik1 * lik2 * lik3)
loglik = function(params) {
beta11 = params[1]
beta12 = params[2]
beta22 = params[3]
beta2 = params[4]
beta3 = params[5]
rho1 = params[6]
rho2 = params[7]
sigma2 = params[8]
# the sample sizes for each cluster
nC = nrow(control)
nI = nrow(identical_twins)
nF = nrow(fraternal_twins)
# putting all the betas into a matrix to do matrix multiplication
beta = matrix(c(beta11, beta12, beta22, beta2, beta3), nrow = 5, ncol = 1)
# Unconstrained optimization problem (i.e. the full likelihood, not logged)
lik1 = (1/(2*pi*sigma2))^(nC/2) * exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
lik2 = (1/(2*pi*sigma2*sqrt(1-rho1^2)))^nI * exp((-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)))
lik3 = (1/(2*pi*sigma2*sqrt(1-rho2^2))) * exp((-1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)))
# Contrained optimization problem (i.e. logged)
# the log-likelihood for the controls
# loglik1 = ((-nC/2)*log(2*pi*sigma2)) - (1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta)
#
# # log-likelihood for the identical twins
# loglik2 = -nI * log(2*pi*sigma2*sqrt(1-rho1^2)) - (1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta))
#
# # log-likelihood for fraternal twins
# loglik3 = -nF * log(2*pi*sigma2*sqrt(1-rho2^2)) - (1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta))
ans = log(lik1 * lik2 * lik3)
return(-ans)
}
init = c(rep(1,5), 0.01, 0.01, 10000)
mle = optim(init, loglik)
mle
init = c(rep(0.1,5), 0.01, 0.01, 10000)
mle = optim(init, loglik)
mle
?optim
init = c(rep(0.1,5), 0.01, 0.01, 10000, method = "Brent", lower = c(rep(-Inf, 5), -1, -1, 0),
upper = c(rep(Inf, 5), 1, 1, Inf))
init
mle = optim(init, loglik, method = "Brent", lower = c(rep(-Inf, 5), -1, -1, 0),
upper = c(rep(Inf, 5), 1, 1, Inf))
mle = optim(init, loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -1, -1, 0),
upper = c(rep(Inf, 5), 1, 1, Inf))
init = c(rep(0.1,5), 0.01, 0.01, 10000)
params=init
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -1, -1, 0),
upper = c(rep(Inf, 5), 1, 1, Inf))
beta11 = params[1]
beta12 = params[2]
beta22 = params[3]
beta2 = params[4]
beta3 = params[5]
rho1 = params[6]
rho2 = params[7]
sigma2 = params[8]
beta = matrix(c(beta11, beta12, beta22, beta2, beta3), nrow = 5, ncol = 1)
lik1 = (1/(2*pi*sigma2))^(nC/2) * exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
lik2 = (1/(2*pi*sigma2*sqrt(1-rho1^2)))^nI * exp((-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)))
lik3 = (1/(2*pi*sigma2*sqrt(1-rho2^2))) * exp((-1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)))
log(lik1 * lik2 * lik3)
init = c(rep(0.1,5), 0.01, 0.01, 10000)
params=init
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -1, -1, 0),
upper = c(rep(Inf, 5), 1, 1, Inf))
loglik = function(params) {
beta11 = params[1]
beta12 = params[2]
beta22 = params[3]
beta2 = params[4]
beta3 = params[5]
rho1 = params[6]
rho2 = params[7]
sigma2 = params[8]
# the sample sizes for each cluster
nC = nrow(control)
nI = nrow(identical_twins)
nF = nrow(fraternal_twins)
# putting all the betas into a matrix to do matrix multiplication
beta = matrix(c(beta11, beta12, beta22, beta2, beta3), nrow = 5, ncol = 1)
# Unconstrained optimization problem (i.e. the full likelihood, not logged)
lik1 = (1/(2*pi*sigma2))^(nC/2) * exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
lik2 = (1/(2*pi*sigma2*sqrt(1-rho1^2)))^nI * exp((-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)))
lik3 = (1/(2*pi*sigma2*sqrt(1-rho2^2))) * exp((-1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)))
# Contrained optimization problem (i.e. logged)
# the log-likelihood for the controls
# loglik1 = ((-nC/2)*log(2*pi*sigma2)) - (1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta)
#
# # log-likelihood for the identical twins
# loglik2 = -nI * log(2*pi*sigma2*sqrt(1-rho1^2)) - (1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta))
#
# # log-likelihood for fraternal twins
# loglik3 = -nF * log(2*pi*sigma2*sqrt(1-rho2^2)) - (1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta))
ans = lik1 * lik2 * lik3
return(-ans)
}
init = c(rep(0.1,5), 0.01, 0.01, 10000)
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -1, -1, 0),
upper = c(rep(Inf, 5), 1, 1, Inf))
lik1 * lik2 * lik3
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
mle
loglik = function(params) {
beta11 = params[1]
beta12 = params[2]
beta22 = params[3]
beta2 = params[4]
beta3 = params[5]
rho1 = params[6]
rho2 = params[7]
sigma2 = params[8]
# the sample sizes for each cluster
nC = nrow(control)
nI = nrow(identical_twins)
nF = nrow(fraternal_twins)
# putting all the betas into a matrix to do matrix multiplication
beta = matrix(c(beta11, beta12, beta22, beta2, beta3), nrow = 5, ncol = 1)
# Unconstrained optimization problem (i.e. the full likelihood, not logged)
lik1 = (1/(2*pi*sigma2))^(nC/2) * exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
lik2 = (1/(2*pi*sigma2*sqrt(1-rho1^2)))^nI * exp((-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)))
lik3 = (1/(2*pi*sigma2*sqrt(1-rho2^2))) * exp((-1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)))
# Contrained optimization problem (i.e. logged)
# the log-likelihood for the controls
# loglik1 = ((-nC/2)*log(2*pi*sigma2)) - (1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta)
#
# # log-likelihood for the identical twins
# loglik2 = -nI * log(2*pi*sigma2*sqrt(1-rho1^2)) - (1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta))
#
# # log-likelihood for fraternal twins
# loglik3 = -nF * log(2*pi*sigma2*sqrt(1-rho2^2)) - (1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta))
ans = log(lik1 * lik2 * lik3)
return(-ans)
}
init = c(rep(0.1,5), 0.01, 0.01, 10000)
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0.01),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
lik = function(params) {
beta11 = params[1]
beta12 = params[2]
beta22 = params[3]
beta2 = params[4]
beta3 = params[5]
rho1 = params[6]
rho2 = params[7]
sigma2 = params[8]
# the sample sizes for each cluster
nC = nrow(control)
nI = nrow(identical_twins)
nF = nrow(fraternal_twins)
# putting all the betas into a matrix to do matrix multiplication
beta = matrix(c(beta11, beta12, beta22, beta2, beta3), nrow = 5, ncol = 1)
# Unconstrained optimization problem (i.e. the full likelihood, not logged)
lik1 = (1/(2*pi*sigma2))^(nC/2) * exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
lik2 = (1/(2*pi*sigma2*sqrt(1-rho1^2)))^nI * exp((-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)))
lik3 = (1/(2*pi*sigma2*sqrt(1-rho2^2))) * exp((-1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)))
# Contrained optimization problem (i.e. logged)
# the log-likelihood for the controls
# loglik1 = ((-nC/2)*log(2*pi*sigma2)) - (1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta)
#
# # log-likelihood for the identical twins
# loglik2 = -nI * log(2*pi*sigma2*sqrt(1-rho1^2)) - (1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta))
#
# # log-likelihood for fraternal twins
# loglik3 = -nF * log(2*pi*sigma2*sqrt(1-rho2^2)) - (1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta))
ans = lik1 * lik2 * lik3
return(-ans)
}
init = c(rep(0.1,5), 0.01, 0.01, 10000)
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
init = c(rep(0.1,5), 0.01, 0.01, 10000)
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
lik = function(params) {
beta11 = params[1]
beta12 = params[2]
beta22 = params[3]
beta2 = params[4]
beta3 = params[5]
rho1 = params[6]
rho2 = params[7]
sigma2 = params[8]
# the sample sizes for each cluster
nC = nrow(control)
nI = nrow(identical_twins)
nF = nrow(fraternal_twins)
# putting all the betas into a matrix to do matrix multiplication
beta = matrix(c(beta11, beta12, beta22, beta2, beta3), nrow = 5, ncol = 1)
# Unconstrained optimization problem (i.e. the full likelihood, not logged)
lik1 = (1/(2*pi*sigma2))^(nC/2) * exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
lik2 = (1/(2*pi*sigma2*sqrt(1-rho1^2)))^nI * exp((-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)))
lik3 = (1/(2*pi*sigma2*sqrt(1-rho2^2))) * exp((-1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)))
# Contrained optimization problem (i.e. logged)
# the log-likelihood for the controls
# loglik1 = ((-nC/2)*log(2*pi*sigma2)) - (1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta)
#
# # log-likelihood for the identical twins
# loglik2 = -nI * log(2*pi*sigma2*sqrt(1-rho1^2)) - (1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta))
#
# # log-likelihood for fraternal twins
# loglik3 = -nF * log(2*pi*sigma2*sqrt(1-rho2^2)) - (1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta))
ans = lik1 * lik2 * lik3
return(-ans)
}
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
init = c(rep(0.1,5), 0.01, 0.01, 10000)
mle = optim(par = init, fn = loglik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
mle = optim(par = init, fn = lik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
mle
lik = function(params) {
beta11 = params[1]
beta12 = params[2]
beta22 = params[3]
beta2 = params[4]
beta3 = params[5]
rho1 = params[6]
rho2 = params[7]
sigma2 = params[8]
# the sample sizes for each cluster
nC = nrow(control)
nI = nrow(identical_twins)
nF = nrow(fraternal_twins)
# putting all the betas into a matrix to do matrix multiplication
beta = matrix(c(beta11, beta12, beta22, beta2, beta3), nrow = 5, ncol = 1)
# Unconstrained optimization problem (i.e. the full likelihood, not logged)
lik1 = (1/(2*pi*sigma2))^(nC/2) * exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
lik2 = (1/(2*pi*sigma2*sqrt(1-rho1^2)))^nI * exp((-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)))
lik3 = (1/(2*pi*sigma2*sqrt(1-rho2^2))) * exp((-1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)))
# Contrained optimization problem (i.e. logged)
# the log-likelihood for the controls
# loglik1 = ((-nC/2)*log(2*pi*sigma2)) - (1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta)
#
# # log-likelihood for the identical twins
# loglik2 = -nI * log(2*pi*sigma2*sqrt(1-rho1^2)) - (1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta))
#
# # log-likelihood for fraternal twins
# loglik3 = -nF * log(2*pi*sigma2*sqrt(1-rho2^2)) - (1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta))
ans = log(lik1 * lik2 * lik3)
return(-ans)
}
init = c(rep(0.1,5), 0.01, 0.01, 10000)
mle = optim(par = init, fn = lik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
lik = function(params) {
beta11 = params[1]
beta12 = params[2]
beta22 = params[3]
beta2 = params[4]
beta3 = params[5]
rho1 = params[6]
rho2 = params[7]
sigma2 = params[8]
# the sample sizes for each cluster
nC = nrow(control)
nI = nrow(identical_twins)
nF = nrow(fraternal_twins)
# putting all the betas into a matrix to do matrix multiplication
beta = matrix(c(beta11, beta12, beta22, beta2, beta3), nrow = 5, ncol = 1)
# Unconstrained optimization problem (i.e. the full likelihood, not logged)
lik1 = (1/(2*pi*sigma2))^(nC/2) * exp((-1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta))
lik2 = (1/(2*pi*sigma2*sqrt(1-rho1^2)))^nI * exp((-1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)))
lik3 = (1/(2*pi*sigma2*sqrt(1-rho2^2))) * exp((-1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)))
# Contrained optimization problem (i.e. logged)
# the log-likelihood for the controls
# loglik1 = ((-nC/2)*log(2*pi*sigma2)) - (1/(2*sigma2)) * t(as.matrix(control$Gc) - controls_v2 %*% beta) %*% (as.matrix(control$Gc) - controls_v2 %*% beta)
#
# # log-likelihood for the identical twins
# loglik2 = -nI * log(2*pi*sigma2*sqrt(1-rho1^2)) - (1/(2*sigma2*(1-rho1)^2)) * sum((as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)^2 + (as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta)^2 + 2*rho1*(as.numeric(identical_twins$Twin1) - identical_twins_v2 %*% beta)*(as.numeric(identical_twins$Twin2) - identical_twins_v2 %*% beta))
#
# # log-likelihood for fraternal twins
# loglik3 = -nF * log(2*pi*sigma2*sqrt(1-rho2^2)) - (1/(2*sigma2*(1-rho2)^2)) * sum((as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)^2 + (as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta)^2 + 2*rho2*(as.numeric(fraternal_twins$`Twin1 Gc`) - fraternal_twins1_v2 %*% beta)*(as.numeric(fraternal_twins$`Twin2 Gc`) - fraternal_twins2_v2 %*% beta))
ans = lik1 * lik2 * lik3
return(-ans)
}
init = c(rep(0.1,5), 0.01, 0.01, 10000)
mle = optim(par = init, fn = lik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
mle
init = c(rep(0.1,5), 0.01, 0.01, 100000)
mle = optim(par = init, fn = lik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
init = c(rep(0.1,5), 0.01, 0.01, 10000)
mle = optim(par = init, fn = lik, method = "L-BFGS-B", lower = c(rep(-Inf, 5), -0.99, -0.99, 0),
upper = c(rep(Inf, 5), 0.99, 0.99, Inf))
mle
mle$par
parameters = mle$par
clinical_data = read.csv("TCGA-CDR.csv", header = T) # loads in TCGA clinical data
setwd("/Users/sarahsamorodnitsky/Documents/PanCancerSurvival/Pan-Cancer-Survival_Modeling")
setwd("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/Pan-Cancer-Survival_Modeling")
setwd("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/Pan-Cancer-Survival-Modeling")
clinical_data = read.csv("TCGA-CDR.csv", header = T) # loads in TCGA clinical data
cancer_types = levels(as.factor(clinical_data$type)) # cancer types available in TCGA dataset
n = length(cancer_types)
mutation_list = list()
i=1
GetTCGAData = function(clinical_data, cancer_types) {
n = length(cancer_types)
mutation_list = list()
for (i in 1:n) {
current_type = cancer_types[i]
mut.current = getTCGA(disease = current_type, data.type="Mutation", type="somatic")$dat
mutation_list[[i]] = mut.current
}
names(mutation_list) = cancer_types
return(mutation_list)
}
MatchBarCodes = function(CancerData, clinical_data, cancer_types) {
# Returns the mutation data so that the patient barcodes match the order they are in the clinical data set
# CancerData_S = list of matrices; mutation data
# clinical_data = dataframe; survival, censor time, age data
# cancer_types = character vector; contains names of all the cancer types (should be of length 28)
# For some cancer types, there will be more survival data than there is available mutation data
# In that case, need to remove observations for which we have survival data but don't have mutation data.
# Then need to remember to remove the observations for which we don't have mutation data, which is why we update Y
n = length(CancerData)
X_new = list()
Y_new = list()
for (i in 1:n) {
current_type = cancer_types[i]
current_Y = clinical_data[clinical_data$type == current_type, ] # subset the clinical data
current_X = CancerData[[i]] # subset mutation data
ord_ind = match(current_Y$bcr_patient_barcode, colnames(current_X)) # the indices to reorder the mutation data so the bar codes match the bar codes in the survival data, this equals the number of observations in the survival data
new_current_X = current_X[, na.omit(ord_ind)] # reordering the columns of X (each column is a patient)
new_current_Y = current_Y[!is.na(ord_ind), ]
if (i == 19) { # for MESO
new_current_Y = current_Y
}
X_new[[i]] = new_current_X
Y_new[[i]] = new_current_Y
}
names(X_new) = cancer_types
names(Y_new) = cancer_types
return(list(X_new = X_new, Y_new = Y_new))
}
n = length(CancerData)
X_new = list()
Y_new = list()
i=1
current_type = cancer_types[i]
current_Y = clinical_data[clinical_data$type == current_type, ] # subset the clinical data
current_X = CancerData[[i]] # subset mutation data
CancerData = GetTCGAData(clinical_data, cancer_types)
library(TCGA2STAT)
GetTCGAData = function(clinical_data, cancer_types) {
n = length(cancer_types)
mutation_list = list()
for (i in 1:n) {
current_type = cancer_types[i]
mut.current = getTCGA(disease = current_type, data.type="Mutation", type="somatic")$dat
mutation_list[[i]] = mut.current
}
names(mutation_list) = cancer_types
return(mutation_list)
}
GetTCGAData = function(clinical_data, cancer_types) {
n = length(cancer_types)
mutation_list = list()
for (i in 1:n) {
current_type = cancer_types[i]
mut.current = getTCGA(disease = current_type, data.type="Mutation", type="somatic")$dat
mutation_list[[i]] = mut.current
}
names(mutation_list) = cancer_types
return(mutation_list)
}
CancerData = GetTCGAData(clinical_data, cancer_types)
length(CancerData)
n = length(CancerData)
X_new = list()
Y_new = list()
i=1
save(CancerData, file = "CancerData.rda")
i=1
current_type = cancer_types[i]
current_Y = clinical_data[clinical_data$type == current_type, ] # subset the clinical data
head(current_Y)
current_X = CancerData[[i]] # subset mutation data
head(current_X)
ord_ind = match(current_Y$bcr_patient_barcode, colnames(current_X)) # the indices to reorder the mutation data so the bar codes match the bar codes in the survival data, this equals the number of observations in the survival data
new_current_X = current_X[, na.omit(ord_ind)] # reordering the columns of X (each column is a patient)
new_current_Y = current_Y[!is.na(ord_ind), ]
head(new_current_X)
head(new_current_X[,1:3])
head(new_current_Y)
ord_ind
is.na(ord_ind)
?match
match(c(1,2,3,4,5), c(1,2,5))
c(1,2,3,4,5)[!is.na(match(c(1,2,3,4,5), c(1,2,5)))]
head(controls_v2)
sum(t(controls_v2) %*% controls_v2)
identical
identical_twins_v2
identical_twins
fraternal_twins
controls_v2
genotypes
fraternal_twins$`Twin2 Gc type`)
fraternal_twins$`Twin2 Gc type`
control$Gc.type
identical_twins$Gc.Type
genotypes = sort(unique(control$Gc.type, identical_twins$Gc.Type, fraternal_twins$`Twin1 Gc type`, fraternal_twins$`Twin2 Gc type`))
genotypes
unique(control$Gc.type, identical_twins$Gc.Type, fraternal_twins$`Twin1 Gc type`, fraternal_twins$`Twin2 Gc type`)
unique(identical_twins$Gc.Type)
genotypes = sort(unique(as.numeric(control$Gc.type), as.numeric(identical_twins$Gc.Type), as.numeric(fraternal_twins$`Twin1 Gc type`), as.numeric(fraternal_twins$`Twin2 Gc type`)))
genotypes
as.numeric(identical_twins$Gc.Type)
unique(control$Gc.type, identical_twins$Gc.Type, fraternal_twins$`Twin1 Gc type`, fraternal_twins$`Twin2 Gc type`)
unique(control$Gc.type)
unique(identical_twins$Gc.Type)
?unique
c(control$Gc.type, identical_twins$Gc.Type, fraternal_twins$`Twin1 Gc type`, fraternal_twins$`Twin2 Gc type`)
fraternal_twins$`Twin1 Gc type`
fraternal_twins$`Twin2 Gc type`
genotypes = c(11, 12, 21, 22)
controls_v2
